<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dt.cn.dao.mapper.SysUserMapper">
	<resultMap id="BaseResultMap"
		type="com.dt.cn.model.sysUser.SysUser">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="username" jdbcType="VARCHAR"
			property="username" />
		<result column="password" jdbcType="VARCHAR"
			property="password" />
		<result column="ts" jdbcType="TIMESTAMP" property="ts" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where><!-- where= where 1=1 -->
		<!--传入集合类型是oredCriteria 循环变量是criteria 关系是或者-->
			<foreach collection="oredCriteria" item="criteria"
				separator="or"><!-- item ：集合变量 -->
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<!-- 条件集合 -->
						<!-- 集合类型是oredCriteria 循环变量是criteria -->
						<foreach collection="criteria.criteria" item="criterion">
							<!-- 通过判断选择查询条件条件-->
							<choose>
							<!-- when 标签  : 类似于case （ otherwise类似于default） -->
								<!-- 通过判断标准来执行对应的查询条件 -->
								<!-- 当条件不符合标准的时候 -->
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<!-- 条件是一个值的时候 调用此条件 相当与id查询 name查询-->
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
		  					  </when>
		  					  <!-- 条件是两个值的时候 调用此条件 -->
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<!-- 如果条件是一个集合的话调用此条件 -->
								<when test="criterion.listValue">
									and ${criterion.condition}
<!-- 集合用 foreach -->             <foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<!-- 批量更新 -->
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<!-- 批量更新 -->
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<!-- 结构是条件判断如果满足就追加 -->
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<!-- 表中的字段值 -->
	<sql id="Base_Column_List">
		id, username, password, ts,img
	</sql>
	<!-- id的值为Mapper接口准备 抽象方法 -->
	<!-- 查询的方法 -->
<!-- 方法名 返回值类型 参数类型 -->
<!-- 以username为条件的模糊查询的总记录数 -->
<select id="getCount" parameterType="map"
		resultType="java.lang.Integer">
		
		select count(*) from sys_user
		<if test="username!=null and username!=''">
		where username like concat('%',#{username},'%')
		</if>
	</select>
		<!-- 所有记录数 -->
	<select id="countByExample"
		parameterType="com.dt.cn.model.sysUser.SysUserExample"
		resultType="java.lang.Long">
		select count(*) from sys_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	
	</select>
		<select id="selectByname" parameterType="com.dt.cn.model.sysUser.SysUserExample" resultMap="BaseResultMap">
		select 
		<if test="distinct">
		       distinct
		</if>
		<include refid="Base_Column_List"></include>
		  from sys_user 
		  <if test="_parameter!=null">
		  <include refid="Example_Where_Clause"></include>
		  </if>
		  <if test="username!=null and username!=''">
		  	<where>
		  		username LIKE CONCAT('%',${username},'%')
		  	</where>
		</if>
		<if test="pageStart>=0">
		limit ${pageStart},${pageSize}
		</if>
		 <if test="orderByClause!=null">
		 order by ${orderByClause}
		</if>
		</select>
		
	<select id="selectByExample"
		parameterType="map"
		resultMap="BaseResultMap">
		select   <!-- 按对象查询 -->
		<!-- 条件满足 这个字段在exa实体类中 是一个布尔值 -->
		<if test="example.distinct">
			distinct
		</if>
		<!-- 正常查询 -->
		<include refid="Base_Column_List" />
		from sys_user
		<!-- 如果参数列表不为空 调用下面的方法 这个方法返回的是参数列表 也可以是条件查询-->
		  <if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
		<if test="username!=null and username!=''">
		where username LIKE CONCAT('%',#{username},'%')</if>
		
		<if test="example.pageStart>=0">
			limit #{example.pageStart},#{example.pageSize}
		</if>
		<!-- 如果有分组字段 根据该字段进行分组查询 -->
		<if test="example.orderByClause != null">
			order by #{example.orderByClause}
		</if>
		
	</select>
	<!-- 通过id查询 -->
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<!-- 要查询的字段 -->
		<include refid="Base_Column_List" />
		from sys_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<!-- 通过id删除 -->
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from sys_user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<!-- 条件删除 -->
	<delete id="deleteByExample"
		parameterType="com.dt.cn.model.sysUser.SysUserExample">
		delete from sys_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	             <!-- ID 给接口用，类型是对象，# 变量 -->
	<!-- 插入数据 -->
	<insert id="insert"
		parameterType="com.dt.cn.model.sysUser.SysUser">
		insert into sys_user (id, username, password,
		ts)
		values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{ts,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective"
		parameterType="com.dt.cn.model.sysUser.SysUser">
		insert into sys_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
		<!--  prefix:当前语句块的前缀 ;suffix:后缀 ;suffixOverrides:去除多余的符号，“，” 逗号 -->
			<if test="id != null">
				id,
			</if>
			<if test="username != null">
				username,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="ts != null">
				ts,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="ts != null">
				#{ts,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<!-- resultType : 方法返回的结果类型 ;include标签   :  当前位置包含（一般是公共的处理方法)    
	refid : 引用自… ; _parameter :  传入查询条件    -->
	<!-- <select id="countByExample"
		parameterType="com.dt.cn.model.sysUser.SysUserExample"
		resultType="java.lang.Long">
		select count(*) from sys_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select> -->
	<update id="updateByExampleSelective" parameterType="map">
		update sys_user
		set img=#{img,jdbcType=}
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.username != null">
				username = #{record.username,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.ts != null">
				ts = #{record.ts,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update sys_user
		set id = #{record.id,jdbcType=INTEGER},
		username = #{record.username,jdbcType=VARCHAR},
		password = #{record.password,jdbcType=VARCHAR},
		ts = #{record.ts,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.dt.cn.model.sysUser.SysUser">
		update sys_user
		<set>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="ts != null">
				ts = #{ts,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.dt.cn.model.sysUser.SysUser">
		update sys_user
		set username = #{username,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		ts = #{ts,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectSysUser" parameterType="map"
		resultMap="BaseResultMap">
		select * from sys_user where 1=1
		<if test="username!=null  and  username!=''">
			and username=#{username,jdbcType=VARCHAR}


		</if>

		<if test="password!=null  and  password!=''">

			and password=#{password,jdbcType=VARCHAR}
		</if>


	</select>


</mapper>